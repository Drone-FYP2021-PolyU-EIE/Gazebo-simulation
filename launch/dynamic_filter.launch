<launch>

  <arg name="gui" default="true"/>

  <node name="sample_manager"
        pkg="nodelet" type="nodelet"
        args="manager"/>

  <node name="line_segment_manager"
        pkg="nodelet" type="nodelet"
        args="manager" output="screen" />

  <!-- Downsampling -->
  <node name="voxelgrid"
        pkg="nodelet" type="nodelet"
        args="load pcl/VoxelGrid line_segment_manager"
        output="screen">
    <remap from="~input" to="/d435/depth/color/points"/>
    <!-- <remap from="~input" to="/extract_indices/output"/>-->
    <rosparam>
      filter_field_name: z
      filter_limit_min: 0.0
      filter_limit_max: 5.0
      leaf_size: 0.01
    </rosparam>
  </node>

  <!-- 1. Edge detector -->
  <node name="organized_edge_detector"
        pkg="nodelet" type="nodelet"
        args="load jsk_pcl/OrganizedEdgeDetector sample_manager">
    <remap from="~input" to="/d435/depth/color/points"/>
    <!-- <remap from="~input" to="/extract_indices/output"/>-->
    <rosparam>
      publish_normal: true
      use_nan_boundary: true
      use_rgb: true
      use_straightline_detection: true
      publish_debug_image: true
    </rosparam>
  </node>

  <!-- 2. Start the inference program-->>
	<node name="yolov4_tiny" pkg="yolov4_tiny" type="inference_ros.py" output="screen" />

  <!-- 3. Implement bounding box -->
  <!-- <arg name="INPUT_CLOUD" value="/d435/depth/color/points" />-->
  <arg name="INPUT_CLOUD" value="/organized_edge_detector/output_rgb_edge" />
  <arg name="INPUT_BOX_ARRAY" value="/desired/input/box_array" />

  <node name="attention_clipper"
        pkg="nodelet" type="nodelet"
        args="standalone jsk_pcl/AttentionClipper">
    <remap from="~input/points" to="$(arg INPUT_CLOUD)" />
    <remap from="~input/box_array" to="$(arg INPUT_BOX_ARRAY)" />
    <rosparam>
      use_multiple_attention: True
      frame_id_list: ["d435_depth_optical_frame", "d435_depth_optical_frame", "d435_depth_optical_frame", "d435_depth_optical_frame"]
    </rosparam>
  </node>

  <node name="extract_indices"
        pkg="jsk_pcl_ros" type="extract_indices">
    <remap from="~input" to="$(arg INPUT_CLOUD)" />
    <remap from="~indices" to="/attention_clipper/output/point_indices" />
  </node>

  <!-- 4. Normal estimation of chosen pointcloud -->
  <!-- Use OMP to speed up the processing time-->
  <!-- Input: a chosen point cloud from pcl detection-->
  <!-- Output: the normal should send to normal concatenator for visualization-->
  <node name="normal_estimation_omp"
        pkg="nodelet" type="nodelet"
        args="standalone jsk_pcl/NormalEstimationOMP">
    <remap from="~input" to="/extract_indices/output"/>
    <rosparam>
      k_search: 0
      radius_search: 0.2
    </rosparam>
  </node>

  <!-- 5. Normal visualization -->
  <!-- Input: the chosen point cloud from detection -->
  <!-- Normal: results from normal estimation omp-->
  <group if="$(arg gui)">
    <node name="normal_concatenater"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl_utils/NormalConcatenater sample_manager">
      <remap from="~input" to="/extract_indices/output"/>
      <remap from="~normal" to="/normal_estimation_omp/output"/>
    </node>

    <node name="rviz"
          pkg="rviz" type="rviz"
          args="-d $(find drone)/rviz/edge_detector.rviz"/>
  </group>





	<!-- Show in Rviz -->
	<!-- <node name="rviz" pkg="rviz" type="rviz" args="-d $(find drone)/rviz/dynamic_filter.rviz" />-->

</launch>
